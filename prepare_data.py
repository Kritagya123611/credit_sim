import pandas as pd

print("Starting data preparation...")

# Load the raw dataset generated by the simulation
try:
    df = pd.read_csv("output/agents.csv")
    print(f"Successfully loaded 'agents.csv' with {df.shape[1]} columns.")
except FileNotFoundError:
    print("Error: 'output/agents.csv' not found. Please run the simulation_engine.py first.")
    exit()

# --- Define Columns to Drop ---

# 1. Drop identifiers (agent_id is kept as the node identifier)
identifiers_to_drop = ['name', 'email', 'account_no']

# 2. Drop target variables and direct spoilers (Data Leakage)
leakage_to_drop = ['archetype_name', 'fraud_type', 'ring_id']
# 'risk_profile' is your target label, so it's not a feature. We'll handle it separately.

# 3. Drop internal simulation parameters and state variables
simulation_params_to_drop = [
    'salary_day', 'salary_amount', 'emi_percentage', 'investment_percentage', 
    'insurance_percentage', 'utility_bill_percentage', 'ecommerce_spend_chance', 
    'allowance_amount', 'allowance_days', 'daily_spend_chance', 'recharge_chance', 
    'bnpl_chance', 'bnpl_repayments', 'monthly_allowance', 'loan_emi_amount', 
    'insurance_premium', 'utility_bill_amount', 'weekly_grocery_day', 
    'school_fee_months', 'occasional_spend_chance', 'shared_device_id', 
    'remittance_percentage', 'daily_work_chance', 'daily_wage_amount', 
    'daily_sales_chance', 'num_daily_sales', 'avg_sale_amount', 'num_employees', 
    'employee_salaries', 'vendor_payment_day', 'vendor_payment_amount', 
    'business_loan_emi_amount', 'owner_drawing_amount', 'stock_investment_amount', 
    'crypto_investment_amount', 'saas_subscription_amount', 'is_traveling', 
    'travel_start_day', 'travel_duration', 'annual_bonus_month', 
    'has_received_bonus_this_year', 'base_daily_payout', 'cod_settlement_chance', 
    'cod_balance', 'fuel_spend_chance', 'weekday_spend_chance', 'weekend_spend_chance', 
    'avg_monthly_income', 'platform_payout_chance', 'sponsorship_chance', 
    'has_sponsorship_funds', 'software_subscription', 'utility_bill_day', 
    'late_payment_chance', 'spend_chance_mod', 'home_state', 'work_city', 
    'monthly_income', 'pay_cycle', 'weekly_wage', 'monthly_pay_day', 'weekly_pay_day', 
    'pension_day', 'monthly_pharmacy_day', 'large_event_month', 
    'has_done_large_event_this_year', 'daily_income_chance', 'avg_gig_payment', 
    'income_sources', 'rent_day', 'rent_amount', 'bill_payment_late_chance', 
    'prepaid_recharge_chance', 'payout_months', 'lump_sum_payment', 
    'has_large_cash_reserve', 'junior_retainer_fee', 'prof_indemnity_premium', 
    'invest_chance_mod', 'consultation_chance', 'avg_consultation_fee', 
    'large_payout_chance', 'clinic_rent_amount', 'sip_amount', 'high_end_spend_chance', 
    'is_active', 'behavior_state', 'creation_date', 'bust_out_day_threshold', 
    'cash_out_threshold'
]

# Combine all columns to be dropped into a single list
columns_to_drop = identifiers_to_drop + leakage_to_drop + simulation_params_to_drop

# --- Separate Features and Labels ---

# The 'risk_profile' column is your ground truth label (y)
labels = df['risk_profile']

# All other columns are potential features (X)
features = df.drop(columns=['risk_profile'])

# Now, drop the unwanted columns from the features DataFrame
features_cleaned = features.drop(columns=columns_to_drop, errors='ignore')

print(f"Dropped {len(columns_to_drop)} columns. Kept {len(features_cleaned.columns)} features.")

# --- Save the Final Datasets ---

# Save the cleaned features ready for training
features_cleaned.to_csv("output/agents_features.csv", index=False)
print("Saved cleaned features to 'output/agents_features.csv'")

# Save the labels in a separate file
labels.to_csv("output/agents_labels.csv", index=False, header=True)
print("Saved labels to 'output/agents_labels.csv'")